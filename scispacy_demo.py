# -*- coding: utf-8 -*-
"""scispacy_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GLXGtQH6Cp1m1NhjvhXudhhyYARQaVp-

The task in this notebook is entity annotation and linking using Scispacy.

## Install scispacy
[Scispacy](https://github.com/allenai/scispacy) is a tool for processing biomedical, scientific or clinical text.
It allows to annotate and link entities.
"""

!pip install spacy==2.3.1
!pip install scispacy==0.3.0
# Install en_core_sci_lg package from the website of spacy  (small corpus)
# Use en_core_sci_md for the medium corpus, or en_core_sci_lg for the large one
!pip install https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.3.0/en_core_sci_sm-0.3.0.tar.gz

"""# Import libraries"""

import scispacy
import spacy
# Import the large dataset
import en_core_sci_sm
from scispacy.linking import EntityLinker
from spacy import displacy

"""## NER
Annotate entities with Scispacy and link them to UMLS concepts.

"""

# Load the corpus
nlp = en_core_sci_sm.load()
# This line takes a while, because we have to download ~1GB of data
# and load a large JSON file (the knowledge base). Be patient!
# Thankfully it should be faster after the first time you use it, because
# the downloads are cached.
# NOTE: The resolve_abbreviations parameter is optional, and requires that
# the AbbreviationDetector pipe has already been added to the pipeline. Adding
# the AbbreviationDetector pipe and setting resolve_abbreviations to True means
# that linking will only be performed on the long form of abbreviations.
linker = EntityLinker(resolve_abbreviations=True, name="umls")

nlp.add_pipe(linker)
# Text to annotate
sentence = "Spinal and bulbar muscular atrophy (SBMA) is an \
           inherited motor neuron disease caused by the expansion \
           of a polyglutamine tract within the androgen receptor (AR). \
           SBMA can be caused by this easily."

# Annotate entities
doc = nlp(sentence)

# Display text highlighting annotated entities
displacy.render(doc, jupyter = True, style ='ent')

# Look at the second random entity
entity = doc.ents[1]
print("Name: ", entity)

# Each entity is linked to more UMLS concepts with a score using the EntityLinker
for umls_ent in entity._.kb_ents:
  # Show concepts linked to the entity with their information
	print(linker.kb.cui_to_entity[umls_ent[0]])